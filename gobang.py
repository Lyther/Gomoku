import numpy as np
import time

COLOR_BLACK = -1
COLOR_WHITE = 1
COLOR_NONE = 0
DEPTH = 4   # 博弈树搜索的深度
PRIORITY_BONUS = 1.5  # 自己下子有先手优势，加成倍数
OBLIQUE_BONUS = 1.5 # 斜向连接比直接连接好，加成倍数
DIRECT_BONUS = 1.1  # 直接连接比跳子连接好，加成倍数
WAIT = 0    # 等待的时间长度

ONE = 10
TWO = 100
THREE = 5000
FOUR = 100000
FIVE = 10000000
B_ONE = 1
B_TWO = 10
B_THREE = 100
B_FOUR = 10000

# 全部的匹配模式，有一个问题是即便某点不能连成5子，依然会进行评估
# 修复方案是延长匹配列表，仅对能胜利的点给分
P_ONE = (0, 1, 0)
P_B_ONE = (0, 1, -1)
P_TWO = (0, 1, 1, 0)
P_TWO_2 = (0, 1, 0, 1, 0)
P_B_TWO = (0, 1, 1, -1)
P_B_TWO_2 = (0, 1, 0, 1, -1)
P_THREE = (0, 1, 1, 1, 0)
P_THREE_2 = (0, 1, 1, 0, 1, 0)
P_B_THREE = (0, 0, 1, 1, 1, -1)
P_B_THREE_2 = (0, 1, 1, 0, 1, -1)
P_B_THREE_3 = (-1, 1, 1, 0, 1, 0)
P_B_THREE_4 = (1, 1, 0, 0, 1)
P_FOUR = (0, 1, 1, 1, 1, 0)
P_B_FOUR = (1, 0, 1, 1, 1)
P_B_FOUR_2 = (1, 1, 0, 1, 1)
P_B_FOUR_3 = (0, 1, 1, 1, 1, -1)
P_FIVE = (1, 1, 1, 1, 1)

# 匹配模式的优先级表，在表前的先被匹配
PATTERN = {P_FIVE: FIVE * DIRECT_BONUS, P_FOUR: FOUR * DIRECT_BONUS,
           P_B_FOUR_3: B_FOUR * DIRECT_BONUS, P_B_FOUR: B_FOUR, P_B_FOUR_2: B_FOUR,
           P_THREE: THREE * DIRECT_BONUS, P_THREE_2: THREE,
           P_B_THREE: B_THREE * DIRECT_BONUS, P_B_THREE_3: B_THREE, P_B_THREE_2: B_THREE, P_B_THREE_4: B_THREE,
           P_TWO: TWO * DIRECT_BONUS, P_TWO_2: TWO, P_B_TWO: B_TWO * DIRECT_BONUS, P_B_TWO_2: B_TWO,
           P_ONE: ONE, P_B_ONE: B_ONE}
# 匹配表，在表内的直接照下
# 使用简单的哈希函数来减少棋盘长度，但仍有优化空间
TABLE = [{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000001000000010000002000000000000000000000000000000000000000000000000':(8, 8),
'0000000000000000000000000000000000000000000000001000000010000006200000000000000000000000000000000000000000000000':(6, 7),
'0000000000000000000000000000000000000000000000009000000110000006200000000000000000000000000000000000000000000000':(7, 8),
'0000000000000000000000000000000000000000010000009000000190000006200000000000000000000000000000000000000000000000':(4, 8),
'0000000000000000000000000000000000200000010000009000000190000016200000000000000000000000000000000000000000000000':(9, 3),
'0000000000000000000000000000000000200000050000009000000190000016200002000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000040200000850000009000000190000016200002000000000000000000000000000000000000000000':(9, 8),
'0000000000000000000000000000000040200000850000009000000190000016200002080000000100000000000000000000000000000000':(11, 6),
'0000000000000000000000000000000040200000850000009000000190000016600002080000000100000800000000000000000000000000':(10, 6),
'0000000000000000000000000000000040200000850000009000000190000016600002480000002100000800000000000000000000000000':(11, 5),
'0000000000000000000000000000000040200000850000009000000190000016600002490000002100000:00000000000000000000000000':(10, 4),
'0000000000000000000000000000000040200000850000009000000190000016600002490000022100000:00000001000000000000000000':(10, 7),
'000000000000000000000000000000004020000095000000900000019000001660000249000002:100000:00000001000000000000000000':(10, 5),
'00000000000000000000000000000000402000009500000090000001900000166000024900004::100000:00000001000000000000000000':(12, 5),
'00000000000000000000000000000000402000009500000090000001900000166000024900004::100000:00000081000004000000000000':(9, 5),
'00000000000000000000000000000000402000009500000090000001900000566000026900004::100000:00000081000004000000000000':(13, 5)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000002000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000002200000010000001000000000000000000000000000000000000000000000000':(8, 5),
'0000000000000000000000000000000000000000000000002200000010000049000000000000000000000000000000000000000000000000':(7, 5),
'0000000000000000000000000000000000000000000000002200000110000049000000200000000000000000000000000000000000000000':(7, 4),
'0000000000000000000000000000000000000000000000002200004910000049000000200000000000000000000000000000000000000000':(6, 4),
'0000000000000000000000000000000000000002000000012200004910000049000000200000000000000000000000000000000000000000':(8, 2),
'0000000000000000000000000000000000000002000000012200004910000169000000200000000000000000000000000000000000000000':(7, 3),
'0000000000000000000000000000000000000002200000012200005910000169000000200000000000000000000000000000000000000000':(5, 2),
'0000000000000000000000000000000000000042200000812200005910000169000000200000000000000000000000000000000000000000':(7, 2),
'0000000000000000000000000000000000000042200000812200065910000169000000200000000000000000000000000000000000000000':(6, 2),
'0000000000000000000000000000000000000042200000912200065910000169000080200000000000000000000000000000000000000000':(4, 2)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000001000000010000002000000000000000000000000000000000000000000000000':(8, 8),
'0000000000000000000000000000000000000000000000001000000010000006200000000000000000000000000000000000000000000000':(6, 7),
'0000000000000000000000000000000000000000000000009000000050000006200000000000000000000000000000000000000000000000':(7, 6),
'0000000000000000000000000000000000000000000000009400000850000006200000000000000000000000000000000000000000000000':(5, 10),
'0000000000000000000000000000000000000000008000009400000850000006200000400000000000000000000000000000000000000000':(10, 5),
'0000000000000000000000000000000000000000008000009400000850000046200000400000080000000000000000000000000000000000':(10, 7),
'0000000000000000000000000000000000000000008000009400000850000046200000400000088100000000000000000000000000000000':(7, 9),
'0000000000000000000000000000000000000000008000009400000852000046200000400000089100000000000000000000000000000000':(5, 11),
'0000000000000000000000000000000000000000008200009410000852000046200000400000089100000000000000000000000000000000':(6, 11),
'0000000000000000000000000000000000000000048200009490000852000046200000400000089100000000000000000000000000000000':(7, 11),
'0000000000000000000000000000000000000000048200009490000852200046240000400000089100000000000000000000000000000000':(7, 10),
'000000000000000000000000000000000000000004820000949000085:600046240000400000089100000000000000000000000000000000':(8, 9),
'000000000000000000000000000000000000000004820000949000085:600046:40000440000089100000000000000000000000000000000':(5, 12),
'0000000000000000000000000000000000004000048:0000949000085:600046:40000440000089100000000000000000000000000000000':(5, 13),
'0000000000000000000000000000000000004000049:2000949000085:600046:40000440000089100000000000000000000000000000000':(5, 14)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000002000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000002200000010000001000000000000000000000000000000000000000000000000':(8, 5),
'000000000000000000000000000000000000000000000000:200000010000041000000000000000000000000000000000000000000000000':(6, 5),
'000000000000000000000000000000000000000000000004:200000010000041000000200000000000000000000000000000000000000000':(8, 7),
'000000000000000000000000000000000000000000000004:200000010000065000000200000000000000000000000000000000000000000':(9, 8),
'000000000000000000000000000000000000000000000004:200000810000065000000240000000000000000000000000000000000000000':(8, 9),
'000000000000000000000000000000000000000000000004:200000810000065600000240000000000000000000000000000000000000000':(10, 7),
'000000000000000000000000000000000000000000000004:200000818000065600000240000004000000000000000000000000000000000':(9, 6),
'000000000000000000000000000000000000000000000004:200008818000065600000640000004000000000000000000000000000000000':(9, 7),
'000000000000000000000000000000000000000000000004:200008818000065600000650000004000000020000000000000000000000000':(9, 9),
'000000000000000000000000000000000000000000000004:200008818000065600000659000004000000020000000000000000000000000':(12, 9),
'000000000000000000000000000000000000000000000004:2000088180000656000006590000040000000:0000000400000000000000000':(11, 9),
'000000000000000000000000000000000000000000000004:2000088180000656000006590000048000000:1000000400000000000000000':(10, 8),
'000000000000000000000000000000000000000000000004:200008:180000656000006590000049000000:1000000400000000000000000':(12, 10)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000008000000010000000000000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000009000000010000000200000000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000000000000400000009000000810000000200000000000000000000000000000000000000000000000':(8, 5),
'0000000000000000000000000000000000000000600000009000000810000040200000000000000000000000000000000000000000000000':(7, 4),
'0000000000000000000000000000000000000000600000089000004810000040200000000000000000000000000000000000000000000000':(8, 4),
'0000000000000000000000000000000000000008600000089000004810000050200000000000000000000000000000000000000000000000':(8, 7),
'0000000000000000000000000000000000000008600000089000004810000056200000000000000000000000000000000000000000000000':(9, 6),
'0000000000000000000000000000000800000008600000089000004810000056200000400000000000000000000000000000000000000000':(3, 2),
'0000000000000000000000040000000800000008600000089000004810000056200000400000008000000000000000000000000000000000':(9, 4),
'0000000000000000000000040000000800000008600000089000004810000056200004400000028000000000000000000000000000000000':(9, 3),
'0000000000000000000000040000000800000008600000089000004810000056200005600000028000000000000000000000000000000000':(7, 5),
'0000000000000000000000040000000800000008600000089000004910000056200005600000228000000000000000000000000000000000':(5, 7)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000000000000010000002100000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000002000000010000002100000400000000000000000000000000000000000000000':(9, 8),
'0000000000000000000000000000000000000000000000002000000010000006100000480000000000000000000000000000000000000000':(9, 7),
'00000000000000000000000000000000000000000000000020000001100000061000004:0000000000000000000000000000000000000000':(7, 8),
'00000000000000000000000000000000000000000000000020000001900000461000004:0000000000000000000000000000000000000000':(7, 4),
'00000000000000000000000000000000000000000000000020000081900000461000044:0000000000000000000000000000000000000000':(10, 5),
'00000000000000000000000000000000000000000000000060000081900000461000044:0000080000000000000000000000000000000000':(7, 6),
'00000000000000000000000000000000000000000000000060000089900000461000044:0000084000000000000000000000000000000000':(4, 7),
'00000000000000000000000000000000080000004000000060000089900000461000044:0000084000000000000000000000000000000000':(4, 5),
'00000000000000000000000000000000880000044000000060000089900000461000044:0000084000000000000000000000000000000000':(4, 6),
'000000000000000000000000000000009:0000044000000060000089900000461000044:0000084000000000000000000000000000000000':(5, 5),
'000000000000000000000000010000009:0000046000000060000089900000461000044:0000084000000000000000000000000000000000':(2, 6),
'000000000000000000200000011000009:0000046000000060000089900000461000044:0000084000000000000000000000000000000000':(3, 6),
'000000000000000004200000091000009:0000046000000060000089900000461000044:0000084000000000000000000000000000000000':(8, 10),
'000000000000000004200000491000009:0000046000000060000089900000461200044:0000084000000000000000000000000000000000':(2, 4),
'000000000000000006200000491000009:0000046000000060100089900000461200044:0000084000000000000000000000000000000000':(1, 6),
'000100000080000006200000491000009:0000046000000060100089900000461200044:0000084000000000000000000000000000000000':(9, 9),
'000100000080000006200000491000009:0000046000000060100089901000461200044:2000084000000000000000000000000000000000':(11, 9),
'000100000080000006200000491000009:0000046000000060500089901000461200044:2000084000000002000000000000000000000000':(10, 9),
'000100000080000006200000491000009:0000046000000060500089901000461200044:2000084800000002000000400000000000000000':(11, 8),
'000100000080000006200000491000009:0000046000000060500089901000461200044:6000084800000082000000400000000000000000':(10, 8),
'000100000080000006200000491000009:0000046000000060500089901000461200044:6000084:00000082000000410000000000000000':(11, 7),
'000100000080000006200000491000009:0000046000000060500089901000461200044:6000084:000000:2000001410000000000000000':(11, 6),
'000100000080000006200000491000009:0000046000000060500089901000461200044:6000084:000008:6000001410000000000000000':(11, 5)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000000000000000000000000008100000090000000000000000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000000000000400000008100000090000002000000000000000000000000000000000000000000000000':(4, 6),
'000000000000000000000000000000000100000040000000:100000090000002000000000000000000000000000000000000000000000000':(5, 7),
'000000000000000000000000000000000100000041000000:100000092000002000000000000000000000000000000000000000000000000':(5, 5),
'000000000000000000000000000000000100000059000000:100000092000002000000000000000000000000000000000000000000000000':(6, 4),
'000000000000000000000000002000000100000059000001:100000092000002000000000000000000000000000000000000000000000000':(5, 4),
'000000000000000000000000002000000100000659000001:100000092000002000000000000000000000000000000000000000000000000':(4, 5),
'000000000000000000000000022000004100000659000001:100000092000002000000000000000000000000000000000000000000000000':(4, 4),
'000000000000000000000000022000005900000659000001:100000092000002000000000000000000000000000000000000000000000000':(3, 4),
'000000000000000000000000422000005900000659000001:100008092000002000000000000000000000000000000000000000000000000':(2, 4)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000000000000010000002100000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000002000000050000002100000000000000000000000000000000000000000000000':(5, 7),
'0000000000000000000000000000000000000000020000002000000150000002100000000000000000000000000000000000000000000000':(7, 6),
'0000000000000000000000000000000000000000420000002000000950000002100000000000000000000000000000000000000000000000':(6, 7),
'000000000000000000000000000000000000000042000004:000000950000002100000000000000000000000000000000000000000000000':(8, 5),
'000000000000000000000000000000000000000046000004:000000950000082100000000000000000000000000000000000000000000000':(4, 8),
'000000000000000000000000000000000420000046000004:000000950000082100000000000000000000000000000000000000000000000':(7, 4),
'000000000000000000000000000000000420000046000004:000008950000082100000400000000000000000000000000000000000000000':(9, 4),
'000000000000000000000000000000000420000046000004:000008950000082100008400000400000000000000000000000000000000000':(8, 4),
'000000000000000000000000000000000420000046000004:0000089500004:2100008400000400000000000000000000000000000000000':(6, 4),
'000000000000000000000000000000000420000446000006:0000089500004:2100008400000400000000000000000000000000000000000':(10, 4)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000002000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000002000000010000001000000200000000000000000000000000000000000000000':(7, 9),
'0000000000000000000000000000000000000000000000002000000091000001000000200000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000000000000000000020000002100000091000001000000200000000000000000000000000000000000000000':(6, 10),
'0000000000000000000000000000000000000000020000002910000091000001000000200000000000000000000000000000000000000000':(5, 11),
'0000000000000000000000000000000000002000020100002910000091000001000000200000000000000000000000000000000000000000':(7, 11),
'0000000000000000000000000000000000002000022100002910000091100001000000200000000000000000000000000000000000000000':(8, 10),
'0000000000000000000000000002000000002000022100002910000091100001010000200000000000000000000000000000000000000000':(9, 11),
'0000000000000000000000000002000000002000022100002910000091100001010000200100000002000000000000000000000000000000':(8, 8),
'0000000000000000000000000002000000002000022100002910000091100001110000220100000002000000000000000000000000000000':(8, 11),
'0000000000000000000000000002000000002000022100002990000091100001150000220100000002000000000000000000000000000000':(8, 9),
'0000000000000000000000000002000000002000022100002990000091100009550000220100000002000000000000000000000000000000':(8, 12)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000008000000010000000000000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000009000000010000000200000000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000000000000400000009000000810000000200000000000000000000000000000000000000000000000':(8, 5),
'0000000000000000000000000000000000000000600000009000000810000040200000000000000000000000000000000000000000000000':(7, 4),
'0000000000000000000000000000000000000000600000089000004810000040200000000000000000000000000000000000000000000000':(8, 4),
'0000000000000000000000000000000000000008600000089000004810000050200000000000000000000000000000000000000000000000':(8, 7),
'0000000000000000000000000000000000000008600000089000004810000056200000000000000000000000000000000000000000000000':(9, 6),
'0000000000000000000000000000000800000008600000089000004810000056200000400000000000000000000000000000000000000000':(3, 2),
'0000000000000000000000040000000800000008600000089000004810000056200000400000008000000000000000000000000000000000':(9, 4),
'0000000000000000000000040000000800000008600000089000004810000056200004400000028000000000000000000000000000000000':(9, 3),
'0000000000000000000000040000000800000008600000089000004810000056200005600000028000000000000000000000000000000000':(7, 5),
'0000000000000000000000040000000800000008600000089000004910000056200005600000228000000000000000000000000000000000':(5, 7)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000000000000010000002100000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000002000000050000002100000000000000000000000000000000000000000000000':(7, 5),
'0000000000000000000000000000000000000000000000012000000250000002100000000000000000000000000000000000000000000000':(8, 5),
'0000000000000000000000000000000000000000000000012000000250000092100000000000000000000000000000000000000000000000':(7, 6),
'0000000000000000000000000000000000000000000000012000000:50000092100000400000000000000000000000000000000000000000':(5, 5),
'0000000000000000000000000000000000000000200000052000000:50000092100000400000000000000000000000000000000000000000':(5, 8),
'0000000000000000000000000000000000000000280000056000000:50000092100000400000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000001000000:80000056000000:50000092100000400000000000000000000000000000000000000000':(5, 7),
'0000000000000000000000000000000001000004::0000056000000:50000092100000400000000000000000000000000000000000000000':(5, 9)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000002000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000002000000010000001000000200000000000000000000000000000000000000000':(7, 9),
'0000000000000000000000000000000000000000000000002000000091000001000000200000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000000000000000000020000002100000091000001000000200000000000000000000000000000000000000000':(6, 10),
'0000000000000000000000000000000000000000020000002910000091000001000000200000000000000000000000000000000000000000':(5, 11),
'0000000000000000000000000000000000002000020100002910000091000001000000200000000000000000000000000000000000000000':(7, 11),
'0000000000000000000000000000000000002000022100002910000091100001000000200000000000000000000000000000000000000000':(8, 10),
'0000000000000000000000000002000000002000022100002910000091100001010000200000000000000000000000000000000000000000':(9, 11),
'0000000000000000000000000002000000002000022100002910000091100001010000200100000002000000000000000000000000000000':(8, 8),
'0000000000000000000000000002000000002000022100002910000091100001110000220100000002000000000000000000000000000000':(8, 11),
'0000000000000000000000000002000000002000022100002990000091100001150000220100000002000000000000000000000000000000':(8, 9),
'0000000000000000000000000002000000002000022100002990000091100009550000220100000002000000000000000000000000000000':(8, 12)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000000000000000000000000000100000090000002000000000000000000000000000000000000000000000000':(6, 9),
'0000000000000000000000000000000000000000000000008500000090000002000000000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000000000000480000008500000090000002000000000000000000000000000000000000000000000000':(4, 9),
'0000000000000000000000000000000000400000482000008500000090000002000000000000000000000000000000000000000000000000':(5, 10),
'0000000000000000000000000080000000400000486000008500000090000002000000000000000000000000000000000000000000000000':(6, 10),
'0000000000000000000000000080000000420000486000008510000090000002000000000000000000000000000000000000000000000000':(8, 10),
'0000000000000000000000000080000000420000486000008510000092000002010000000000000000000000000000000000000000000000':(6, 11),
'0000000000000000000000000080000000420000486000008552000092000002010000000000000000000000000000000000000000000000':(8, 11),
'0000000000000000000000000080000000420000486000008552000092000002058000000000000000000000000000000000000000000000':(8, 9),
'000000000000000000000000008000000042000048600000855200009:000002458000000000000000000000000000000000000000000000':(8, 8),
'000000000000000000000000008000000042000048600000855200009:00000255:000000000000000000000000000000000000000000000':(8, 7)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(7, 8),
'0000000000000000000000000000000000000000000000000000000090000000100000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000002000000090000000500000000000000000000000000000000000000000000000':(8, 10),
'0000000000000000000000000000000000000000000000002000000090000000520000010000000000000000000000000000000000000000':(10, 7),
'0000000000000000000000000000000000000000000000002000000090000000520000110000008000000000000000000000000000000000':(7, 9),
'0000000000000000000000000000000000000000000000002000000092000040520000110000008000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000002000000092000042520000510000008000000000000000000000000000000000':(9, 4),
'0000000000000000000000000000000000000000000000002000000092000042520008510000048000000000000000000000000000000000':(11, 5),
'0000000000000000000000000000000000000000010000002000000092000042520008510000048000000200000000000000000000000000':(6, 5),
'0000000000000000000000000000000000000000010000086000000092000042520008510000048000000200000000000000000000000000':(8, 7),
'000000000000000000000000000000000000000005000008600000009200004:520008510000048000000200000000000000000000000000':(4, 9),
'000000000000000000000000000000000080000045000008600000009200004:520008510000048000000200000000000000000000000000':(5, 9),
'000000000000000000000000000000000080000445200008600000009200004:520008510000048000000200000000000000000000000000':(5, 5),
'000000000000000000000000000000000080000465200008640000009200004:520008510000048000000200000000000000000000000000':(4, 7),
'000000000000000000000000000000004880000465200008640000009200004:520008510000048000000200000000000000000000000000':(4, 8),
'0000000000000000000000004000000048:0000465200008640000009200004:520008510000048000000200000000000000000000000000':(2, 3),
'0000000000000000800000004000000048:0000465200008640000009200004:520008511000048000000200000000000000000000000000':(9, 8),
'0000000000000000800000004000000048:0000465200008640000009200004:520008591000048010000200000000000000000000000000':(11, 11),
'0000000000000000800000004000000048:1000465200008640000009200004:520008591000048010000200200000000000000000000000':(9, 11),
'0000000000000000800000004000000048:1000465200008640000009200004:520008591200048010000200210000000000000000000000':(10, 9),
'0000000000000000800000004000000048:1000465200008640000049200004:520008591200048810000200210000000000000000000000':(12, 11),
'0000000000000000800000004000000048:1000465200008640000049200004:520008591200048810000204210000080000000000000000':(10, 11),
'0000000000000000800000004000000048:1000465200008640000049200004:520008591200048890000204210000080000000100000000':(8, 11)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000000000000010000000200000000000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000000000000000000080000000100000010000000200000000000000000000000000000000000000000000000':(7, 6),
'0000000000000000000000000000000000000000080000000100000410000000200000000000002000000000000000000000000000000000':(7, 5),
'0000000000000000000000000000000000000000080000000100008510000000200000000000002000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000082000000100008510000001200000000000002000000000000000000000000000000000':(6, 5),
'0000000000000000000000000000000000000000282000040100008510000001200000000000002000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000:82000041100008510000001200000000000002000000000000000000000000000000000':(5, 7),
'0000000000000000000000000000000000000000:92000041100008512000001200000000000002000000000000000000000000000000000':(4, 8),
'0000000000000000000000000000000000100000:92000041100008512000021200000000000002000000000000000000000000000000000':(3, 9)},
{'0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000':(8, 6),
'0000000000000000000000000000000000000000000000000000000010000006000000000000000000000000000000000000000000000000':(9, 7),
'0000000000000000000000000000000000000000000000000000000110000006000000020000000000000000000000000000000000000000':(7, 6),
'0000000000000000000000000000000000000000000000001000000910000006000000020000000000000000000000000000000000000000':(5, 7),
'0000000000000000000000000000000000000000120000001000000910000006000000020000000000000000000000000000000000000000':(4, 4),
'0000000000000000000000000000000020000000120000001000000910000006100000020000000000000000000000000000000000000000':(9, 9),
'0000000000000000000000000000000020000000120000041000000910000006100000022000000000000000000000000000000000000000':(8, 5),
'0000000000000000000000000000000020000000120000045000000910000086100000022000000000000000000000000000000000000000':(6, 8),
'0000000000000000000000000100000020000000120000045200000910000086100000022000000000000000000000000000000000000000':(4, 5),
'00000000000000000000000001000000:0000000120000055200000910000086100000022000000000000000000000000000000000000000':(6, 3),
'00000000000000000000000001000000:0000000120000855200000910000086100000422000000000000000000000000000000000000000':(6, 9),
'00000000000000000000000001000000:0000000120000855:00000911000086100000422000000000000000000000000000000000000000':(3, 6),
'00000000000000000000000009000000:0000004120000855:00000911000086100000422000000000000000000000000000000000000000':(4, 7),
'00000000000000000000000009000000:9000004120000855:00000911000086100000422000000000000000000000000000000000000000':(5, 8),
'00000000000000000000000009000000:90000041:0000855:00000915000086100000422000000000000000000000000000000000000000':(2, 5)},
{'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000':(7, 7),
'0000000000000000000000000000000000000000000000008000000010000000000000000000000000000000000000000000000000000000':(6, 6),
'0000000000000000000000000000000000000000000000009000000010000000200000000000000000000000000000000000000000000000':(5, 6),
'0000000000000000000000000000000000000000400000009000000810000000200000000000000000000000000000000000000000000000':(5, 8),
'0000000000000000000000000000000000000000640000009000000810000000200000000000000000000000000000000000000000000000':(4, 8),
'0000000000000000000000000000000000100000660000009000000810000000200000000000000000000000000000000000000000000000':(3, 8),
'0000000000000000000000000040000000100000660000009200000810000000200000000000000000000000000000000000000000000000':(4, 7),
'0000000000000000000000000040000004100000660000089200000810000000200000000000000000000000000000000000000000000000':(4, 6),
'0000000000000000000000000040000085100000660000089200000810000000200000000000000000000000000000000000000000000000':(4, 9),
'0000000000000000000000000040000085520000660000089200000810000000200000000000000000000000000000000000000000000000':(3, 6),
'0000000000000000002000000440000085520000660000089200000810000000200000000000000000000000000000000000000000000000':(2, 5),
'0000000000000000042000000440000085520000660000089:00000810000000200000000000000000000000000000000000000000000000':(1, 4)}]

# 假定在(x, y)落子后，我能取得的收益
def earn(board, role, x, y, size, direction):
	earning = 0
	if role == 1:
		# 落子后黑棋（对手）取得收益的情况
		earning += evaluate(board, x, y, COLOR_BLACK, size, direction)
		# 落子后白棋（我）取得收益的情况，有先手优势额外加成
		earning += evaluate(board, x, y, COLOR_WHITE, size, direction) * PRIORITY_BONUS
	else:
		# 落子后黑棋（我）取得收益的情况，有先手优势额外加成
		earning += evaluate(board, x, y, COLOR_BLACK, size, direction) * PRIORITY_BONUS
		# 落子后白棋（对手）取得收益的情况
		earning += evaluate(board, x, y, COLOR_WHITE, size, direction)
	return earning


# 假定在(x, y)落子后，评估此点的得分
def evaluate(board, x, y, color, size, direction):
	radius = 6
	score = 0
	num = 0
	board[x, y] = color
	if direction == 1 or direction == 0:  # 横向判断
		left = max(0, y - radius)
		right = min(size, y + radius)
		pattern = board[x, left:right].tolist()
		t_score = match(color, pattern)
		if t_score >= 1000:
			num += 1
		score += t_score
	if direction == 2 or direction == 0:  # 纵向判断
		top = max(0, x - radius)
		down = min(size, x + radius)
		pattern = board[top:down, y].tolist()
		t_score = match(color, pattern)
		if t_score >= 1000:
			num += 1
		score += t_score
	if direction == 3 or direction == 0:  # 左下到右上
		left = right = y
		top = down = x
		for i in range(radius):
			if left <= 0 or down >= size - 1:
				break
			left -= 1
			down += 1
		for i in range(radius):
			if right >= size or top <= -1:
				break
			right += 1
			top -= 1
		pattern = []
		while left < right and down > top:
			pattern.append(board[down, left])
			left += 1
			down -= 1
		t_score = match(color, pattern)
		if t_score >= 1000:
			num += 1
		score += t_score
	if direction == 4 or direction == 0:  # 左上到右下
		left = right = y
		top = down = x
		for i in range(radius):
			if left <= 0 or top <= 0:
				break
			left -= 1
			top -= 1
		for i in range(radius):
			if right >= size or down >= size:
				break
			right += 1
			down += 1
		pattern = []
		while left < right and top < down:
			pattern.append(board[top, left])
			left += 1
			top += 1
		t_score = match(color, pattern)
		if t_score >= 1000:
			num += 1
		score += t_score
	board[x, y] = COLOR_NONE
	if num > 1:
		score *= 2
	return score


# 在列表中找对应串进行匹配，返回匹配到的最大得分
def match(color, pattern):
	# 锁定当前落子的角色颜色为1，敌人为-1
	if color == -1:
		pattern = [-i for i in pattern]
	for i in PATTERN.keys():  # 后期考虑换为KMP加速搜索
		ri = i[::-1]  # 匹配模式逆序
		for j in range(len(pattern) - len(i) + 1):
			sub = tuple(pattern[j:j + len(i)])
			if sub == i or sub == ri:
				return PATTERN[i]
	return 0

def hash_board(board):
	string = ''
	cache = 0
	state = 0
	for i in board:
		for j in i:
			cache = cache | encoding(state, j)
			state += 1
			if state == 2:
				string += chr(cache+48)
				cache = state = 0
	return string

def encoding(state, step):
	cache = 0
	if state == 0:
		if step == 0:
			cache = cache | 0x00
		elif step == -1:
			cache = cache | 0x01
		elif step == 1:
			cache = cache | 0x02
		else:
			cache = cache | 0x03
	elif state == 1:
		if step == 0:
			cache = cache | 0x00
		elif step == -1:
			cache = cache | 0x04
		elif step == 1:
			cache = cache | 0x08
		else:
			cache = cache | 0x0C
	return cache

class AI(object):

	# chessboard_size, color, time_out passed from agent
	def __init__(self, chessboard_size, color, time_out):

		self.chessboard_size = chessboard_size
		# You are white or black
		self.color = color
		# the max time you should use, your algorithm's run time must not exceed the timelimit.
		self.time_out = time_out
		# You need add your decision into your candidate_list.
		# System will get the end of your candidate_list as your decision.
		self.candidate_list = []
		# 上一步的棋盘，用来获取最新的落子
		self.history_board = np.zeros((chessboard_size, chessboard_size), dtype=np.int)

	# The input is current chessboard.
	def go(self, chessboard):
		self.candidate_list.clear()
		# 判定下一步落子的位置
		new_pos = self.next_step(chessboard)
		# 判定落子位置是否为空，并落子
		assert chessboard[new_pos[0], new_pos[1]] == COLOR_NONE
		self.candidate_list.append(new_pos)
		# 同步历史棋盘状态
		self.history_board[new_pos[0], new_pos[1]] = self.color
		time.sleep(WAIT)

	def next_step(self, chessboard):
		next = self.find_table(chessboard)  # 首先查找棋谱，如果找到直接返回
		if next:
			return next
		if np.array_equal(self.history_board, chessboard):  # 如果棋盘为空，直接落子中央
			return (7, 7)
		# 获取棋盘上空白的位置
		idx = np.where(chessboard == COLOR_NONE)
		idx = list(zip(idx[0], idx[1]))
		# 获取上一步敌人落子的位置
		idx_recent = np.where(self.history_board == COLOR_NONE)
		idx_recent = list(zip(idx_recent[0], idx_recent[1]))
		recent = [i for i in idx_recent if i not in idx][0]
		# 获取当前的总步数
		steps = self.chessboard_size * self.chessboard_size - len(idx)

		# 通常情况的下法，获得更大的开局优势
		if steps == 2:
			if recent != (7, 5):
				return (7, 5)
			if recent != (7, 9):
				return (7, 9)
			if recent != (5, 7):
				return (5, 7)
			if recent != (9, 7):
				return (9, 7)
		if steps == 4:
			if chessboard[7, 5] == COLOR_BLACK:
				if (6, 6) in idx:
					return (6, 6)
				if (8, 6) in idx:
					return (8, 6)
			if chessboard[7, 9] == COLOR_BLACK:
				if (6, 8) in idx:
					return (6, 8)
				if (8, 8) in idx:
					return (8, 8)
			if chessboard[5, 7] == COLOR_BLACK:
				if (6, 6) in idx:
					return (6, 6)
				if (6, 8) in idx:
					return (6, 8)
			if chessboard[9, 7] == COLOR_BLACK:
				if (8, 6) in idx:
					return (8, 6)
				if (8, 8) in idx:
					return (8, 8)

		# 白手时的较优策略
		# 针对棋型的下法
		next = self.find_table(chessboard)
		if next:
			return next
		# 通常情况的下法
		if steps == 1:
			if (recent[0]-1, recent[1]) in idx:
				return (recent[0]-1, recent[1])
			if (recent[0], recent[1]-1) in idx:
				return (recent[0], recent[1]-1)
			if (recent[0]+1, recent[1]) in idx:
				return (recent[0]+1, recent[1])
			if (recent[0], recent[1]+1) in idx:
				return (recent[0], recent[1]+1)

		# 确定收益最大的点
		# 后期考虑只计算上一步落子为中心，米字形区域内点的收益
		max_earning = -1
		new_pos = ()
		for i in idx:
			earning = earn(chessboard, self.color, i[0], i[1], self.chessboard_size, 0)
			if earning > max_earning:
				max_earning = earning
				new_pos = i
		if new_pos:
			return new_pos
		return idx[int(len(idx) / 2)]

	def find_table(self, board):
		for i in TABLE:
			tables = i.keys()
			for j in tables:
				if hash_board(board) == j:
					return i[j]
				elif hash_board(np.flipud(board)) == j:
					return tuple((self.chessboard_size - i[j][0] - 1, i[j][1]))
				elif hash_board(np.fliplr(board)) == j:
					return tuple((i[j][0], self.chessboard_size - i[j][1] - 1))
				elif hash_board(np.rot90(board, 1)) == j:
					return tuple((self.chessboard_size - i[j][1] - 1, i[j][0]))
				elif hash_board(np.rot90(board, 2)) == j:
					return tuple((self.chessboard_size - i[j][0] - 1, self.chessboard_size - i[j][1] - 1))
				elif hash_board(np.rot90(board, 3)) == j:
					return tuple((i[j][1], self.chessboard_size - i[j][0] - 1))
